import streamlit as st
import google.generativeai as genai
import os
from dotenv import load_dotenv

# Charger les variables d'environnement depuis le fichier .env
load_dotenv()

# --- Configuration de la page Streamlit ---
st.set_page_config(
    page_title="Syst√®me Multi-Agents avec Gemini",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- Styles CSS pour am√©liorer le design (Th√®me Sombre et Responsive) ---
st.markdown("""
<style>
    /* Th√®me g√©n√©ral sombre */
    .stApp {
        background-color: #0F172A; /* Fond bleu nuit */
        color: #CBD5E1; /* Texte gris clair par d√©faut */
    }

    /* Titres */
    h1, h2, h3 {
        color: #FFFFFF; /* Titres en blanc */
    }

    /* Boutons */
    .stButton>button {
        background-color: #3B82F6; /* Bleu vif */
        color: white;
        border-radius: 12px;
        border: none;
        padding: 10px 24px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        transition-duration: 0.4s;
    }
    .stButton>button:hover {
        background-color: #2563EB; /* Bleu plus fonc√© au survol */
    }

    /* Zones de saisie */
    .stTextArea textarea, .stTextInput input {
        background-color: #1E293B;
        color: #E2E8F0;
        border: 1px solid #334155;
        border-radius: 8px;
    }

    /* Expanders pour les r√©sultats des agents */
    .stExpander {
        background-color: #1E293B;
        border: 1px solid #334155;
        border-radius: 12px;
    }
    .stExpander header {
        color: #F1F5F9;
        font-weight: bold;
    }
    
    /* Am√©lioration de la visibilit√© des messages d'√©tat */
    .stAlert {
        border-radius: 8px;
    }

    /* Barre lat√©rale */
    .st-emotion-cache-16txtl3 {
        background-color: #1E293B;
    }

    /* --- Media Queries pour la responsivit√© --- */
    @media (max-width: 768px) {
        h1 {
            font-size: 2.2rem; /* R√©duire la taille du titre sur mobile */
        }
        .stButton>button {
            width: 100%; /* Faire en sorte que le bouton prenne toute la largeur */
            margin-top: 10px;
        }
    }
</style>
""", unsafe_allow_html=True)


# --- Fonctions des Agents ---

def configure_gemini(api_key):
    """Configure l'API Gemini avec la cl√© fournie."""
    try:
        genai.configure(api_key=api_key)
        return True
    except Exception as e:
        st.error(f"Erreur lors de la configuration de l'API Gemini : {e}")
        return False

def get_gemini_response(prompt, agent_name):
    """
    Fonction g√©n√©rique pour appeler le mod√®le Gemini et g√©rer les erreurs.
    Affiche un spinner pendant la g√©n√©ration.
    """
    with st.spinner(f"ü§ñ L'agent **{agent_name}** est en train de travailler..."):
        try:
            model = genai.GenerativeModel('gemini-2.5-flash')
            response = model.generate_content(prompt)
            return response.text
        except Exception as e:
            st.error(f"Une erreur est survenue lors de l'appel √† l'API Gemini pour l'agent {agent_name}: {e}")
            return None

def planner_agent(task):
    """
    Agent Planner : D√©compose la t√¢che complexe en un plan d√©taill√©.
    """
    prompt = f"""
    R√¥le : Vous √™tes un planificateur expert en IA. Votre mission est de d√©composer une t√¢che complexe en une s√©rie d'√©tapes claires, logiques et r√©alisables.
    Ne g√©n√©rez pas le contenu, fournissez uniquement le plan.

    T√¢che complexe √† planifier : "{task}"

    Format de sortie attendu :
    **Plan d'action :**
    1.  **√âtape 1 :** [Description de la premi√®re √©tape]
    2.  **√âtape 2 :** [Description de la deuxi√®me √©tape]
    3.  ...
    N.  **√âtape N :** [Description de la derni√®re √©tape]

    G√©n√©rez le plan pour la t√¢che ci-dessus.
    """
    return get_gemini_response(prompt, "Planner")

def executor_agent(task, plan):
    """
    Agent Executor : Ex√©cute le plan pour accomplir la t√¢che.
    """
    prompt = f"""
    R√¥le : Vous √™tes un agent d'ex√©cution IA. Votre mission est de suivre un plan d'action pour accomplir une t√¢che sp√©cifique et de produire le r√©sultat final.

    T√¢che originale : "{task}"
    Plan √† ex√©cuter :
    ---
    {plan}
    ---

    Instructions :
    - Suivez chaque √©tape du plan attentivement.
    - G√©n√©rez une r√©ponse compl√®te et bien structur√©e qui r√©pond √† la t√¢che originale.
    - Assurez-vous que le contenu est de haute qualit√©, pr√©cis et pertinent.

    Produisez maintenant le r√©sultat final.
    """
    return get_gemini_response(prompt, "Executor")

def critic_agent(task, plan, execution_result):
    """
    Agent Critic : √âvalue la qualit√© de l'ex√©cution et fournit des retours.
    """
    prompt = f"""
    R√¥le : Vous √™tes un critique expert en IA. Votre mission est d'√©valuer la qualit√© d'un travail effectu√© par un autre agent IA (Executor) en se basant sur la t√¢che originale et le plan fourni.

    T√¢che originale : "{task}"
    Plan suivi :
    ---
    {plan}
    ---
    R√©sultat de l'ex√©cution √† √©valuer :
    ---
    {execution_result}
    ---

    Instructions d'√©valuation :
    1.  **Conformit√© au plan :** Le r√©sultat suit-il toutes les √©tapes du plan ?
    2.  **Qualit√© et Pr√©cision :** Le contenu est-il de haute qualit√©, pr√©cis, et sans erreurs factuelles ?
    3.  **Compl√©tude :** La r√©ponse est-elle compl√®te par rapport √† la t√¢che originale ?
    4.  **Clart√© et Structure :** Le r√©sultat est-il bien structur√©, clair et facile √† comprendre ?

    Format de sortie attendu :
    **√âvaluation critique :**
    - **Points forts :** [Listez les aspects positifs du r√©sultat]
    - **Points √† am√©liorer :** [Listez les faiblesses, les incoh√©rences ou les omissions]
    - **Suggestion d'am√©lioration :** [Proposez des modifications concr√®tes pour am√©liorer le r√©sultat]
    - **Note globale (sur 10) :** [Donnez une note justifi√©e]
    """
    return get_gemini_response(prompt, "Critic")


# --- Interface Streamlit ---

st.title("ü§ñ Syst√®me Multi-Agents avec Gemini 1.5 Flash")
st.markdown("Cette application utilise une cha√Æne d'agents IA (Planner, Executor, Critic) pour traiter des t√¢ches complexes.")

# --- Barre lat√©rale pour la configuration et l'√©tat de l'API ---
api_key = os.getenv("GOOGLE_API_KEY")

with st.sidebar:
    st.header("Configuration")
    if api_key:
        st.success("Cl√© API charg√©e depuis le fichier .env !", icon="‚úÖ")
    else:
        st.error("Cl√© API non trouv√©e.", icon="‚ö†Ô∏è")
        st.info("Veuillez cr√©er un fichier `.env` √† la racine de votre projet et y ajouter votre cl√© API comme ceci :\n`GOOGLE_API_KEY='VOTRE_CLE_API'`")

    st.markdown("---")
    st.markdown("### Comment √ßa marche ?")
    st.markdown("""
    1.  **Planner** : D√©compose votre t√¢che en un plan.
    2.  **Executor** : R√©alise le plan et g√©n√®re la r√©ponse.
    3.  **Critic** : √âvalue la r√©ponse pour en assurer la qualit√©.
    """)

# --- Zone de contenu principale ---
st.header("1. Soumettez votre t√¢che complexe")
task_input = st.text_area("D√©crivez la t√¢che que vous souhaitez que les agents accomplissent :", height=150,
                          placeholder="Exemple : R√©dige un article de blog sur l'impact de l'IA sur le march√© du travail, en incluant les opportunit√©s et les d√©fis.")

if st.button("Lancer les agents", type="primary"):
    if not api_key:
        st.error("Veuillez configurer votre cl√© API dans le fichier .env pour continuer.")
    elif not task_input:
        st.warning("Veuillez entrer une t√¢che √† accomplir.")
    else:
        # Configuration de l'API
        if configure_gemini(api_key):
            st.success("API Gemini configur√©e avec succ√®s !")
            st.markdown("---")
            st.header("2. Analyse et Traitement par les Agents")

            # --- √âtape 1: Planner ---
            plan = planner_agent(task_input)
            if plan:
                with st.expander("üìù **Plan g√©n√©r√© par l'Agent Planner**", expanded=True):
                    st.markdown(plan)

                # --- √âtape 2: Executor ---
                execution_result = executor_agent(task_input, plan)
                if execution_result:
                    st.markdown("---")
                    st.subheader("‚úÖ R√©sultat produit par l'Agent Executor")
                    st.markdown(execution_result)

                    # --- √âtape 3: Critic ---
                    critic_review = critic_agent(task_input, plan, execution_result)
                    if critic_review:
                        with st.expander("üßê **√âvaluation de l'Agent Critic**", expanded=True):
                            st.markdown(critic_review)
